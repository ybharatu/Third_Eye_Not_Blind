_sr04_init(void){
	nrf_gpio_cfg_output(TRIGGER_PIN);
	nrf_gpio_cfg_input(ECHO_PIN,NRF_GPIO_PIN_PULLUP);
	NRF_TIMER2->TASKS_STOP = 1;
	NRF_TIMER2->MODE = TIMER_MODE_MODE_Timer;
	NRF_TIMER2->PRESCALER = 0;
	NRF_TIMER2->BITMODE = 3;
	NRF_TIMER2->TASKS_CLEAR = 1;

}

void hc_sr04_loop(){
	uint16_t length = 15;
	uint32_t err_code;
	char message[length];
	bool running = true;
	//while(running){
	nrf_gpio_pin_set(TRIGGER_PIN);
	nrf_delay_us(10);
	nrf_gpio_pin_clear(TRIGGER_PIN);

	while(!nrf_gpio_pin_read(ECHO_PIN)){}
	NRF_TIMER2->TASKS_START = 1;
	while(nrf_gpio_pin_read(ECHO_PIN)){}
	NRF_TIMER2->TASKS_STOP = 1;
	NRF_TIMER2->TASKS_CAPTURE[2] = 1;
	int32_t ticks = NRF_TIMER2->CC[2];
	NRF_TIMER2->TASKS_CLEAR = 1;
	int32_t distance = ticks * 62.5 * 0.000343 / 2; // dist = ticks * (62.5 ns) * (.000340 mm/ns); 
	sprintf(message,"Dist: %d mm\n", distance);
	err_code = ble_nus_data_send(&m_nus, message, &length, m_conn_handle);
	APP_ERROR_CHECK(err_code);
	nrf_delay_ms(250);
	//  }
}
